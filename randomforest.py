# -*- coding: utf-8 -*-
"""randomforest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Z6wnf6Kl86acIwHc1GcO8lbRcXQ4jxp
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier

dataset = pd. read_csv('/content/heart.csv')
dataset.info( )

print(np.unique(dataset[['cp']].values))
print(np.unique(dataset[['thal']].values))
print(np.unique(dataset[['ca']].values))

dataset = pd.get_dummies(dataset, columns=['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal'])
standardScaler = StandardScaler()
columns_to_scale = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']
dataset[columns_to_scale] = standardScaler.fit_transform(dataset[columns_to_scale])

dataset.head()

y = dataset['target']
X = dataset.drop(['target'], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_param_grid = {'n_estimators': range(1, 1000, 10)}
rf = RandomForestClassifier()
rf_random = RandomizedSearchCV(param_distributions=rf_param_grid, estimator=rf, scoring="accuracy", verbose=0, n_iter=100, cv=4)
rf_random.fit(X_train, y_train)
best_params = rf_random.best_params_
print(f'Best parameters: {best_params}')

def feature_imp(df,model):
    fi = pd.DataFrame(columns=['feature', 'importance'])
    fi["feature"] = df.columns
    fi["importance"] = model.best_estimator_.feature_importances_
    return fi.sort_values(by="importance", ascending=False)
feature_imp(X_train, rf_random).plot('feature','importance','barh',figsize=(10,7), legend=False)